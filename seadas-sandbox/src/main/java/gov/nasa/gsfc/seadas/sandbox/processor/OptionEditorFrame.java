/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * OptionEditorFrame.java
 *
 * Created on Aug 24, 2010, 3:11:33 PM
 */
package gov.nasa.gsfc.seadas.sandbox.processor;

import java.awt.Point;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;
import javax.swing.event.EventListenerList;
import javax.swing.text.BadLocationException;

/**
 *
 * @author dshea
 */
public class OptionEditorFrame extends javax.swing.JFrame {

    /** Creates new form OptionEditorFrame */
    public OptionEditorFrame() {
        initComponents();
        setup();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        descriptionPopupMenu = new javax.swing.JPopupMenu();
        descriptionAddMenuItem = new javax.swing.JMenuItem();
        jScrollPane1 = new javax.swing.JScrollPane();
        currentOptionsTextArea = new javax.swing.JTextArea();
        jLabel1 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        addOptionButton = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        jPanel2 = new javax.swing.JPanel();
        okButton = new javax.swing.JButton();
        closeButton = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        applyButton = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        searchTextField = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        descriptionEditorPane = new javax.swing.JEditorPane();

        descriptionAddMenuItem.setText("Add");
        descriptionAddMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                descriptionAddMenuItemActionPerformed(evt);
            }
        });
        descriptionPopupMenu.add(descriptionAddMenuItem);

        currentOptionsTextArea.setColumns(15);
        currentOptionsTextArea.setRows(5);
        jScrollPane1.setViewportView(currentOptionsTextArea);

        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Current Options");

        jPanel1.setLayout(new javax.swing.BoxLayout(jPanel1, javax.swing.BoxLayout.LINE_AXIS));

        addOptionButton.setText("<");
        addOptionButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addOptionButtonActionPerformed(evt);
            }
        });
        jPanel1.add(addOptionButton);

        okButton.setText("OK");
        okButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                okButtonActionPerformed(evt);
            }
        });

        closeButton.setText("Close");
        closeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeButtonActionPerformed(evt);
            }
        });

        applyButton.setText("Apply");
        applyButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                applyButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(okButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, 236, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(applyButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, 237, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(closeButton))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(okButton)
                        .addComponent(jLabel3)
                        .addComponent(jLabel4)
                        .addComponent(applyButton))
                    .addComponent(closeButton))
                .addContainerGap())
        );

        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("Description");

        searchTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                searchTextFieldKeyTyped(evt);
            }
        });

        jLabel5.setText("Search");

        descriptionEditorPane.setContentType("text/html");
        descriptionEditorPane.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        descriptionEditorPane.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                descriptionEditorPaneMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                descriptionEditorPaneMouseReleased(evt);
            }
        });
        jScrollPane3.setViewportView(descriptionEditorPane);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(jScrollPane1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(12, 12, 12))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 202, Short.MAX_VALUE)
                                .addComponent(jLabel5)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(searchTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 425, Short.MAX_VALUE)))
                    .addComponent(jPanel2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jSeparator1, javax.swing.GroupLayout.DEFAULT_SIZE, 664, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(searchTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 352, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 352, Short.MAX_VALUE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 352, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void addOptionButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addOptionButtonActionPerformed
        addOption();
    }//GEN-LAST:event_addOptionButtonActionPerformed

    private void applyButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_applyButtonActionPerformed
        fireActionPerformed(new ActionEvent(this, ActionEvent.ACTION_PERFORMED, "Apply"));
    }//GEN-LAST:event_applyButtonActionPerformed

    private void searchTextFieldKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_searchTextFieldKeyTyped
        String newSearch = searchTextField.getText();
        if (newSearch.startsWith(searchText)) {
            searchText = newSearch;
            filterOptions(filteredOptionList);
        } else {
            searchText = newSearch;
            filterOptions(optionList);
        }
        displayOptions();
    }//GEN-LAST:event_searchTextFieldKeyTyped

    private void descriptionAddMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_descriptionAddMenuItemActionPerformed
        addOption();
    }//GEN-LAST:event_descriptionAddMenuItemActionPerformed

    private void descriptionEditorPaneMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_descriptionEditorPaneMousePressed
        sendInfoText("editor - MousePressed");
        if (evt.isPopupTrigger()) {
            sendInfoText("    popup trigger");
            Point p = evt.getPoint();
            int pos = descriptionEditorPane.viewToModel(p);
            sendInfoText("    pos=" + Integer.toString(pos));
            descriptionEditorPane.setCaretPosition(pos);

            descriptionPopupMenu.show(evt.getComponent(),
                    evt.getX(), evt.getY());
        }
    }//GEN-LAST:event_descriptionEditorPaneMousePressed

    private void descriptionEditorPaneMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_descriptionEditorPaneMouseReleased
        sendInfoText("editor - MouseReleased");
        if (evt.isPopupTrigger()) {
            sendInfoText("    popup trigger");
            Point p = evt.getPoint();
            int pos = descriptionEditorPane.viewToModel(p);
            sendInfoText("    pos=" + Integer.toString(pos));
            descriptionEditorPane.setCaretPosition(pos);

            descriptionPopupMenu.show(evt.getComponent(),
                    evt.getX(), evt.getY());
        }
    }//GEN-LAST:event_descriptionEditorPaneMouseReleased

    private void closeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeButtonActionPerformed
        setVisible(false);
    }//GEN-LAST:event_closeButtonActionPerformed

    private void okButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_okButtonActionPerformed
        fireActionPerformed(new ActionEvent(this, ActionEvent.ACTION_PERFORMED, "OK"));
        setVisible(false);
    }//GEN-LAST:event_okButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {

            @Override
            public void run() {
                new OptionEditorFrame().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addOptionButton;
    private javax.swing.JButton applyButton;
    private javax.swing.JButton closeButton;
    private javax.swing.JTextArea currentOptionsTextArea;
    private javax.swing.JMenuItem descriptionAddMenuItem;
    private javax.swing.JEditorPane descriptionEditorPane;
    private javax.swing.JPopupMenu descriptionPopupMenu;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JButton okButton;
    private javax.swing.JTextField searchTextField;
    // End of variables declaration//GEN-END:variables
    private String programName;
    private String programVersion;
    private ArrayList<LevelOption> optionList = new ArrayList<LevelOption>();
    private ArrayList<LevelOption> filteredOptionList = new ArrayList<LevelOption>();
    private String searchText = "";
    private String descriptionBuffer = "";
    protected EventListenerList listenerList = new EventListenerList();

    private void setup() {
        // descriptionEditorPane.setContentType("text/html");
    }

    private void loadDescription() {
        LevelOptionReader reader = new LevelOptionReader(programName);
        boolean result = reader.loadOptions();
        if (result) {
            programVersion = reader.getProgVersion();
            filteredOptionList = optionList = reader.getOptionList();
        } else {
            programVersion = "-Error- Could not get help for " + programName;
        }
        searchText = "";
        searchTextField.setText("");
        displayOptions();
    }

    private void filterOptions(ArrayList<LevelOption> list) {
        filteredOptionList = new ArrayList<LevelOption>();
        String st = searchText.toLowerCase();
        for (LevelOption option : list) {
            for (String s : option.getDescription()) {
                if (s.toLowerCase().contains(st)) {
                    filteredOptionList.add(option);
                    break;
                }
            }
        }
    }

    private void displayOptions() {

        StringBuilder buffer = new StringBuilder(programVersion);
        buffer.append("<br><br>");
        int pos = programVersion.length() + 3;

        // display all of the options
        int lineNum = 2;
        for (LevelOption option : filteredOptionList) {
            boolean firstLine = true;
            option.setStartLine(lineNum);

            for (String s : option.getDescription()) {
                s = s.trim();
                if (firstLine) {
                    firstLine = false;
                    String[] parts = s.split("\\s+", 2);
                    buffer.append("<b>");
                    buffer.append(parts[0]);
                    buffer.append("</b> ");
                    buffer.append(parts[1]);
                    pos += s.length() + 1;
                } else {
                    buffer.append("&nbsp;&nbsp;&nbsp;&nbsp;");
                    buffer.append(s);
                    pos += s.length() + 5;
                }
                buffer.append("<br>");
            }
        }

        descriptionEditorPane.setText(buffer.toString());
        try {
            descriptionBuffer = descriptionEditorPane.getText(0, descriptionEditorPane.getCaretPosition());
        } catch (BadLocationException ex) {
            descriptionBuffer = "bad location";
        }
        descriptionEditorPane.setCaretPosition(0);

    }

    private void addOption() {
        int pos = descriptionEditorPane.getCaretPosition();

        LevelOption option = getOption(pos);
        String val = getOptionValue(pos);

        sendInfoText("pos=" + Integer.toString(pos) + ", val=" + val
                + ", '" + descriptionBuffer.substring(pos, pos + 1) + "' = " + descriptionBuffer.codePointAt(pos));

        if (option != null) {
            if (val == null || val.length() == 0) {
                val = option.getValue();
            }
            //  currentOptionsTextArea.setCaretPosition(currentOptionsTextArea.get)
            currentOptionsTextArea.append("\n");
            currentOptionsTextArea.append(option.getKey() + "=" + val);
        }

    }

    /**
     * @return the programName
     */
    public String getProgName() {
        return programName;
    }

    /**
     * @param progName the program name to set
     */
    public void setProgName(String progName) {
        this.programName = progName;
        setTitle(progName);
        loadDescription();
    }

    private String getOptionValue(int pos) {
        char markerData[] = {(char) 160, (char) 160, (char) 160, (char) 160};
        String marker = new String(markerData);

        // see if the cursor is on the option key, the word before the type
        int space1 = descriptionBuffer.lastIndexOf(marker, pos);
        if (space1 == -1) {
            return null;
        }
        int space2 = descriptionBuffer.indexOf(marker, pos + 1);
        if (space2 == -1) {
            space2 = descriptionBuffer.length();
        }
        String line = descriptionBuffer.substring(space1, space2);
        String words[] = line.trim().split("\\s+");

        // make sure we get at lease 1 word
        if (words.length == 0) {
            return null;
        }

        // don't want to use previous options values
        for (String s : words) {
            if (LevelOption.isDataType(s)) {
                int i = descriptionBuffer.indexOf(s, space1);
                i = descriptionBuffer.lastIndexOf(' ', i - 2);
                if (i < pos) {
                    return null;
                }
            }
        }

        if (words[0].charAt(words[0].length() - 1) == ':') {
            return words[0].substring(4, words[0].length() - 1);
        }

        return null;
    }

    private LevelOption getOption(int pos) {
        // make pos 0 based
        pos--;

        // see if the cursor is on the option key, the word before the type
        int space1 = descriptionBuffer.lastIndexOf(' ', pos);
        int space2 = descriptionBuffer.indexOf(' ', space1 + 1);
        if (space2 == -1) {
            space2 = descriptionBuffer.length();
        }
        int space3 = descriptionBuffer.indexOf(' ', space2 + 1);
        if (space3 == -1) {
            space3 = descriptionBuffer.length();
        }
        String word2 = null;
        String word1 = null;
        try {
            word1 = descriptionBuffer.substring(space1 + 1, space2);
            word2 = descriptionBuffer.substring(space2 + 1, space3);
            if (LevelOption.isDataType(word2)) {
                return getOption(word1);
            }
        } catch (Exception e) {
        }

        // look backwards for the type
        int paren = pos + 2;
        while (true) {
            paren = descriptionBuffer.lastIndexOf('(', paren - 1);
            if (paren == -1) {
                return null;
            }
            space3 = descriptionBuffer.indexOf(' ', paren);
            if (space3 == -1) {
                return null;
            }
            try {
                word2 = descriptionBuffer.substring(paren, space3);
                if (LevelOption.isDataType(word2)) {
                    space1 = descriptionBuffer.lastIndexOf(' ', paren - 2);
                    word1 = descriptionBuffer.substring(space1 + 1, paren - 1);
                    LevelOption option = getOption(word1);
                    if (option != null) {
                        return option;
                    }
                }
            } catch (Exception e) {
                return null;
            }
        }
    }

    private LevelOption getOption(String key) {
        for (LevelOption option : filteredOptionList) {
            if (option.getKey().equals(key.trim())) {
                return option;
            }
        }
        return null;
    }

    private void sendInfoText(String s) {
        System.out.println(s);
    }

    /**
     * Adds an <code>ActionListener</code> to the button.
     * @param l the <code>ActionListener</code> to be added
     */
    public void addActionListener(ActionListener l) {
        listenerList.add(ActionListener.class, l);
    }

    /**
     * Removes an <code>ActionListener</code> from the button.
     * If the listener is the currently set <code>Action</code>
     * for the button, then the <code>Action</code>
     * is set to <code>null</code>.
     *
     * @param l the listener to be removed
     */
    public void removeActionListener(ActionListener l) {
            listenerList.remove(ActionListener.class, l);
    }

    /**
     * Returns an array of all the <code>ActionListener</code>s added
     * to this AbstractButton with addActionListener().
     *
     * @return all of the <code>ActionListener</code>s added or an empty
     *         array if no listeners have been added
     * @since 1.4
     */
    public ActionListener[] getActionListeners() {
        return (ActionListener[]) (listenerList.getListeners(
                ActionListener.class));
    }

    /**
     * Notifies all listeners that have registered interest for
     * notification on this event type.  The event instance
     * is lazily created using the <code>event</code>
     * parameter.
     *
     * @param event  the <code>ActionEvent</code> object
     * @see EventListenerList
     */
    protected void fireActionPerformed(ActionEvent event) {
        // Guaranteed to return a non-null array
        Object[] listeners = listenerList.getListenerList();
        ActionEvent e = null;
        // Process the listeners last to first, notifying
        // those that are interested in this event
        for (int i = listeners.length - 2; i >= 0; i -= 2) {
            if (listeners[i] == ActionListener.class) {
                // Lazily create the event:
                if (e == null) {
                    e = new ActionEvent(this,
                            ActionEvent.ACTION_PERFORMED,
                            event.getActionCommand(),
                            event.getWhen(),
                            event.getModifiers());
                }
                ((ActionListener) listeners[i + 1]).actionPerformed(e);
            }
        }
    }
}
