/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * SeadasProcessorFrame.java
 *
 * Created on May 26, 2010, 1:51:52 PM
 */
package gov.nasa.gsfc.seadas.sandbox.processor;

import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import javax.swing.*;
import javax.swing.event.TableModelEvent;
import javax.swing.event.TableModelListener;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.JTableHeader;
import javax.swing.table.TableColumn;
import javax.swing.table.TableColumnModel;


/**
 *
 * @author dshea
 */
public class SeadasProcessorFrame extends javax.swing.JFrame {

    static final int NUM_OUTPUT_ROWS = 9;
    static final int L1GEN_ROW = 0;
    static final int L1BRS_ROW = 1;
    static final int L1MAP_ROW = 2;
    static final int L2GEN_ROW = 3;
    static final int L2BRS_ROW = 4;
    static final int L2MAP_ROW = 5;
    static final int L3BIN_ROW = 6;
    static final int L3MAP_ROW = 7;
    static final int L3GEN_ROW = 8;
    static final int INPUT_FILE_COL = 0;
    static final int GEO_FILE_COL = 1;

    class MyCellEditor extends javax.swing.DefaultCellEditor {

        javax.swing.JTextField jtf;

        public MyCellEditor() {
            super(new javax.swing.JTextField());
        }

        @Override
        public java.awt.Component getTableCellEditorComponent(JTable table, Object value, boolean isSelected, int row, int column) {
            java.awt.Component c = super.getTableCellEditorComponent(table, value, isSelected, row, column);
            if (c instanceof javax.swing.JTextField) {
                jtf = ((javax.swing.JTextField) c);
                jtf.selectAll();
                //jtf.setText("");
                //jtf.setCaretPosition(0);
            }

            return c;
        }
    }


    private class TableHeaderMouseHandler extends MouseAdapter {

        @Override
        public void mousePressed(MouseEvent e) {
            maybeShowPopup(e);
        }

        @Override
        public void mouseReleased(MouseEvent e) {
            maybeShowPopup(e);
        }

        private void maybeShowPopup(MouseEvent e) {
            if (e.isPopupTrigger()) {

                JTableHeader h = (JTableHeader) e.getSource();
                TableColumnModel columnModel = h.getColumnModel();
                int viewColumn = h.columnAtPoint(e.getPoint());
                int column = columnModel.getColumn(viewColumn).getModelIndex();
                DefaultTableModel tableModel = (DefaultTableModel) h.getTable().getModel();

                String columnName = tableModel.getColumnName(column);

                if (columnName.equals("Input File")) {
                    inputFileHeaderPopupMenu.show(e.getComponent(),
                            e.getX(), e.getY());
                } else if (columnName.equals("Geo File")) {
                    geoFileHeaderPopupMenu.show(e.getComponent(),
                            e.getX(), e.getY());
                }
            }
        }
    }

    private class TableMouseHandler extends MouseAdapter {

        @Override
        public void mousePressed(MouseEvent e) {
            maybeShowPopup(e);
        }

        @Override
        public void mouseReleased(MouseEvent e) {
            maybeShowPopup(e);
        }

        private void maybeShowPopup(MouseEvent e) {
            if (e.isPopupTrigger()) {
                JTable t = (JTable) e.getSource();
                TableColumnModel columnModel = t.getColumnModel();
                tablePopupViewColumn = t.columnAtPoint(e.getPoint());
                tablePopupColumn = columnModel.getColumn(tablePopupViewColumn).getModelIndex();
                tablePopupRow = t.rowAtPoint(e.getPoint());

                sendInfoText("table popup, row=" + tablePopupRow + ", column=" + tablePopupColumn);

                inputTablePopupMenu.show(e.getComponent(), e.getX(), e.getY());
            }
        }
    }

    /** Creates new form SeadasProcessorFrame */
    public SeadasProcessorFrame() {
        initComponents();
        setup();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        inputFileHeaderPopupMenu = new javax.swing.JPopupMenu();
        inputFileHeaderReplaceMenu = new javax.swing.JMenuItem();
        inputFileHeaderAppendMenu = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        inputFileHeaderLoadFileMenu = new javax.swing.JMenuItem();
        inputFileHeaderAppendFileMenu = new javax.swing.JMenuItem();
        inputFileHeaderWriteFileMenu = new javax.swing.JMenuItem();
        jSeparator5 = new javax.swing.JPopupMenu.Separator();
        inputFileHeaderClearMenu = new javax.swing.JMenuItem();
        geoFileHeaderPopupMenu = new javax.swing.JPopupMenu();
        geoFileHeaderReplaceMenu = new javax.swing.JMenuItem();
        geoFileHeaderAppendMenu = new javax.swing.JMenuItem();
        jSeparator3 = new javax.swing.JPopupMenu.Separator();
        geoFileHeaderLoadFileMenu = new javax.swing.JMenuItem();
        geoFileHeaderAppendFileMenu = new javax.swing.JMenuItem();
        geoFileHeaderWriteFileMenu = new javax.swing.JMenuItem();
        jSeparator6 = new javax.swing.JPopupMenu.Separator();
        geoFileHeaderClearMenu = new javax.swing.JMenuItem();
        inputTablePopupMenu = new javax.swing.JPopupMenu();
        inputTableReplaceMenu = new javax.swing.JMenuItem();
        inputTableInsertMenu = new javax.swing.JMenuItem();
        jSeparator4 = new javax.swing.JPopupMenu.Separator();
        inputTableInsertRowMenu = new javax.swing.JMenuItem();
        inputTableDeleteRowMenu = new javax.swing.JMenuItem();
        jSeparator7 = new javax.swing.JPopupMenu.Separator();
        inputTableFileLoadMenu = new javax.swing.JMenuItem();
        inputTableFileInsertMenu = new javax.swing.JMenuItem();
        jScrollPane1 = new javax.swing.JScrollPane();
        inputFileTable = new javax.swing.JTable();
        jSeparator2 = new javax.swing.JSeparator();
        runButton = new javax.swing.JButton();
        closeButton = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        outputTable = new javax.swing.JTable();
        geoFileCheckBox = new javax.swing.JCheckBox();

        inputFileHeaderReplaceMenu.setText("Replace Files");
        inputFileHeaderReplaceMenu.setToolTipText("Replace input files from dialog box");
        inputFileHeaderReplaceMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                inputFileHeaderReplaceMenuActionPerformed(evt);
            }
        });
        inputFileHeaderPopupMenu.add(inputFileHeaderReplaceMenu);

        inputFileHeaderAppendMenu.setText("Append Files");
        inputFileHeaderAppendMenu.setToolTipText("Append files from a dialog box");
        inputFileHeaderAppendMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                inputFileHeaderAppendMenuActionPerformed(evt);
            }
        });
        inputFileHeaderPopupMenu.add(inputFileHeaderAppendMenu);
        inputFileHeaderPopupMenu.add(jSeparator1);

        inputFileHeaderLoadFileMenu.setText("Load From File");
        inputFileHeaderLoadFileMenu.setToolTipText("Load file names from a file");
        inputFileHeaderLoadFileMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                inputFileHeaderLoadFileMenuActionPerformed(evt);
            }
        });
        inputFileHeaderPopupMenu.add(inputFileHeaderLoadFileMenu);

        inputFileHeaderAppendFileMenu.setText("Append From File");
        inputFileHeaderAppendFileMenu.setToolTipText("Append file names from a file");
        inputFileHeaderAppendFileMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                inputFileHeaderAppendFileMenuActionPerformed(evt);
            }
        });
        inputFileHeaderPopupMenu.add(inputFileHeaderAppendFileMenu);

        inputFileHeaderWriteFileMenu.setText("Write to File");
        inputFileHeaderWriteFileMenu.setToolTipText("Write file names to a file");
        inputFileHeaderWriteFileMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                inputFileHeaderWriteFileMenuActionPerformed(evt);
            }
        });
        inputFileHeaderPopupMenu.add(inputFileHeaderWriteFileMenu);
        inputFileHeaderPopupMenu.add(jSeparator5);

        inputFileHeaderClearMenu.setText("Clear Input Files");
        inputFileHeaderClearMenu.setToolTipText("Clear all of the Input Files");
        inputFileHeaderClearMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                inputFileHeaderClearMenuActionPerformed(evt);
            }
        });
        inputFileHeaderPopupMenu.add(inputFileHeaderClearMenu);

        geoFileHeaderReplaceMenu.setText("Replace Files");
        geoFileHeaderReplaceMenu.setToolTipText("Replace GEO files from a dialog box");
        geoFileHeaderReplaceMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                geoFileHeaderReplaceMenuActionPerformed(evt);
            }
        });
        geoFileHeaderPopupMenu.add(geoFileHeaderReplaceMenu);

        geoFileHeaderAppendMenu.setText("Append Files");
        geoFileHeaderAppendMenu.setToolTipText("Append GEO files from a dialog box");
        geoFileHeaderAppendMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                geoFileHeaderAppendMenuActionPerformed(evt);
            }
        });
        geoFileHeaderPopupMenu.add(geoFileHeaderAppendMenu);
        geoFileHeaderPopupMenu.add(jSeparator3);

        geoFileHeaderLoadFileMenu.setText("Load From File");
        geoFileHeaderLoadFileMenu.setToolTipText("Load GEO files names from a file");
        geoFileHeaderLoadFileMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                geoFileHeaderLoadFileMenuActionPerformed(evt);
            }
        });
        geoFileHeaderPopupMenu.add(geoFileHeaderLoadFileMenu);

        geoFileHeaderAppendFileMenu.setText("Append From File");
        geoFileHeaderAppendFileMenu.setToolTipText("Append GEO file names from a file");
        geoFileHeaderAppendFileMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                geoFileHeaderAppendFileMenuActionPerformed(evt);
            }
        });
        geoFileHeaderPopupMenu.add(geoFileHeaderAppendFileMenu);

        geoFileHeaderWriteFileMenu.setText("Write to File");
        geoFileHeaderWriteFileMenu.setToolTipText("Write file names to a file");
        geoFileHeaderWriteFileMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                geoFileHeaderWriteFileMenuActionPerformed(evt);
            }
        });
        geoFileHeaderPopupMenu.add(geoFileHeaderWriteFileMenu);
        geoFileHeaderPopupMenu.add(jSeparator6);

        geoFileHeaderClearMenu.setText("Clear GEO Files");
        geoFileHeaderClearMenu.setToolTipText("Clear all of the GEO Files");
        geoFileHeaderClearMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                geoFileHeaderClearMenuActionPerformed(evt);
            }
        });
        geoFileHeaderPopupMenu.add(geoFileHeaderClearMenu);

        inputTableReplaceMenu.setText("Replace Files");
        inputTableReplaceMenu.setToolTipText("Replace the current files with files form the dialog box");
        inputTableReplaceMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                inputTableReplaceMenuActionPerformed(evt);
            }
        });
        inputTablePopupMenu.add(inputTableReplaceMenu);

        inputTableInsertMenu.setText("Insert Files");
        inputTableInsertMenu.setToolTipText("Insert files from the dilog box");
        inputTableInsertMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                inputTableInsertMenuActionPerformed(evt);
            }
        });
        inputTablePopupMenu.add(inputTableInsertMenu);
        inputTablePopupMenu.add(jSeparator4);

        inputTableInsertRowMenu.setText("Insert Row");
        inputTableInsertRowMenu.setToolTipText("Insert a row before the current row");
        inputTableInsertRowMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                inputTableInsertRowMenuActionPerformed(evt);
            }
        });
        inputTablePopupMenu.add(inputTableInsertRowMenu);

        inputTableDeleteRowMenu.setText("Delete Row");
        inputTableDeleteRowMenu.setToolTipText("Delete this row");
        inputTableDeleteRowMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                inputTableDeleteRowMenuActionPerformed(evt);
            }
        });
        inputTablePopupMenu.add(inputTableDeleteRowMenu);
        inputTablePopupMenu.add(jSeparator7);

        inputTableFileLoadMenu.setText("Load From File");
        inputTableFileLoadMenu.setToolTipText("Load a list of file names from a file");
        inputTableFileLoadMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                inputTableFileLoadMenuActionPerformed(evt);
            }
        });
        inputTablePopupMenu.add(inputTableFileLoadMenu);

        inputTableFileInsertMenu.setText("Insert From File");
        inputTableFileInsertMenu.setToolTipText("Insert a list of file names from a file");
        inputTableFileInsertMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                inputTableFileInsertMenuActionPerformed(evt);
            }
        });
        inputTablePopupMenu.add(inputTableFileInsertMenu);

        setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("SeaDAS Product Processor");

        inputFileTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null}
            },
            new String [] {
                "Input File", "Geo File"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        inputFileTable.setFillsViewportHeight(true);
        inputFileTable.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        inputFileTable.getTableHeader().setReorderingAllowed(false);
        inputFileTable.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                inputFileTableFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                inputFileTableFocusLost(evt);
            }
        });
        jScrollPane1.setViewportView(inputFileTable);

        runButton.setText("Run");
        runButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                runButtonActionPerformed(evt);
            }
        });

        closeButton.setText("Close");
        closeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeButtonActionPerformed(evt);
            }
        });

        outputTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                { new Boolean(false), "L1 Gen", "Edit", null},
                {null, "L1 Browse", "Edit", null},
                {null, "L1 Map", "Edit", null},
                {null, "L2 Gen", "Edit", null},
                {null, "L2 Browse", "Edit", null},
                {null, "L2 Map", "Edit", null},
                {null, "L3 Bin", "Edit", null},
                {null, "L3 Map", "Edit", null},
                {null, "L3 Gen", "Edit", null}
            },
            new String [] {
                "Save", "Process", "Options", "Raw Options"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Boolean.class, java.lang.String.class, java.lang.Object.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                true, false, true, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        outputTable.setRowSelectionAllowed(false);
        outputTable.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane2.setViewportView(outputTable);

        geoFileCheckBox.setText("MODIS GEO files");
        geoFileCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                geoFileCheckBoxActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 336, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(runButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 212, Short.MAX_VALUE)
                                .addComponent(closeButton))
                            .addComponent(jSeparator2, javax.swing.GroupLayout.DEFAULT_SIZE, 336, Short.MAX_VALUE)
                            .addComponent(geoFileCheckBox)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 322, Short.MAX_VALUE)))
                .addContainerGap())
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {closeButton, runButton});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 78, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(geoFileCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 172, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(runButton)
                    .addComponent(closeButton))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void inputFileHeaderClearMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_inputFileHeaderClearMenuActionPerformed
        clearFiles(INPUT_FILE_COL);
    }//GEN-LAST:event_inputFileHeaderClearMenuActionPerformed

    private void geoFileHeaderClearMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_geoFileHeaderClearMenuActionPerformed
        clearFiles(GEO_FILE_COL);
    }//GEN-LAST:event_geoFileHeaderClearMenuActionPerformed

    private void closeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeButtonActionPerformed
        setVisible(false);
    }//GEN-LAST:event_closeButtonActionPerformed

    private void inputFileHeaderAppendMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_inputFileHeaderAppendMenuActionPerformed

        // setup the look of the file open dialog
        inputFileChooser.setDialogTitle("Select Input Files");
        inputFileChooser.setMultiSelectionEnabled(true);

        // show dialog and wait for return
        int returnVal = inputFileChooser.showOpenDialog(this);

        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File files[] = inputFileChooser.getSelectedFiles();

            for (File f : files) {
                try {
                    appendFile(INPUT_FILE_COL, f.getCanonicalPath());
                } catch (IOException ex) {
                    sendInfoText("-ERROR- append - Can't seem to resolve the coninical path for " + f.getName());
                }
            }

        } else {
            sendInfoText("Append command cancelled by user.");
        }
    }//GEN-LAST:event_inputFileHeaderAppendMenuActionPerformed

    private void inputFileTableFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_inputFileTableFocusGained
        sendInfoText("inputFileTable focus gained");
    }//GEN-LAST:event_inputFileTableFocusGained

    private void inputTableReplaceMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_inputTableReplaceMenuActionPerformed

        // setup the look of the file open dialog
        if (tablePopupColumn == INPUT_FILE_COL) {
            inputFileChooser.setDialogTitle("Select Input Files");
        } else {
            inputFileChooser.setDialogTitle("Select Input GEO Files");
        }
        inputFileChooser.setMultiSelectionEnabled(true);

        // show dialog and wait for return
        int returnVal = inputFileChooser.showOpenDialog(this);

        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File files[] = inputFileChooser.getSelectedFiles();
            int insertRow = tablePopupRow;

            for (File f : files) {
                try {
                    loadFile(insertRow, tablePopupColumn, f.getCanonicalPath());
                    insertRow++;
                } catch (IOException ex) {
                    sendInfoText("Can't seem to resolve the coninical path for " + f.getName());
                }
            }

        } else {
            sendInfoText("Replace command cancelled by user.");
        }

    }//GEN-LAST:event_inputTableReplaceMenuActionPerformed

    private void inputTableDeleteRowMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_inputTableDeleteRowMenuActionPerformed
        if (tablePopupRow != -1) {
            deleteRow(tablePopupRow);
        }
    }//GEN-LAST:event_inputTableDeleteRowMenuActionPerformed

    private void inputFileHeaderReplaceMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_inputFileHeaderReplaceMenuActionPerformed

        // setup the look of the file open dialog
        inputFileChooser.setDialogTitle("Select Input Files");
        inputFileChooser.setMultiSelectionEnabled(true);

        // show dialog and wait for return
        int returnVal = inputFileChooser.showOpenDialog(this);

        if (returnVal == JFileChooser.APPROVE_OPTION) {
            clearFiles(INPUT_FILE_COL);

            File files[] = inputFileChooser.getSelectedFiles();
            int row = 0;
            for (File f : files) {
                try {
                    loadFile(row++, INPUT_FILE_COL, f.getCanonicalPath());
                } catch (IOException ex) {
                    sendInfoText("-ERROR- replace - Can't seem to resolve the coninical path for " + f.getName());
                }
            }

        } else {
            sendInfoText("Replace command cancelled by user.");
        }
    }//GEN-LAST:event_inputFileHeaderReplaceMenuActionPerformed

    private void geoFileHeaderReplaceMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_geoFileHeaderReplaceMenuActionPerformed
        // setup the look of the file open dialog
        inputFileChooser.setDialogTitle("Select GEO Files");
        inputFileChooser.setMultiSelectionEnabled(true);

        // show dialog and wait for return
        int returnVal = inputFileChooser.showOpenDialog(this);

        if (returnVal == JFileChooser.APPROVE_OPTION) {
            clearFiles(GEO_FILE_COL);

            File files[] = inputFileChooser.getSelectedFiles();
            int row = 0;
            for (File f : files) {
                try {
                    loadFile(row++, GEO_FILE_COL, f.getCanonicalPath());
                } catch (IOException ex) {
                    sendInfoText("-ERROR- replace GEO - Can't seem to resolve the coninical path for " + f.getName());
                }
            }

        } else {
            sendInfoText("Replace GEO command cancelled by user.");
        }

    }//GEN-LAST:event_geoFileHeaderReplaceMenuActionPerformed

    private void inputTableInsertRowMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_inputTableInsertRowMenuActionPerformed
        if (tablePopupRow != -1) {
            insertRow(tablePopupRow);
        }
    }//GEN-LAST:event_inputTableInsertRowMenuActionPerformed

    private void runButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_runButtonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_runButtonActionPerformed

    private void inputFileTableFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_inputFileTableFocusLost

        // when the table looses focus and a cell has been altered, 
        // we need to send the changes.
        sendInfoText("inputFileTable focus lost");
        //     if (inputFileTable.isEditing()) {
        //         inputFileTable.getCellEditor().stopCellEditing();
    }//GEN-LAST:event_inputFileTableFocusLost

    private void geoFileCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_geoFileCheckBoxActionPerformed

        if (geoFileCheckBox.isSelected()) {
            addGeoColumn();
        } else {
            removeGeoColumn();
        }
    }//GEN-LAST:event_geoFileCheckBoxActionPerformed

    private void geoFileHeaderAppendMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_geoFileHeaderAppendMenuActionPerformed

        // setup the look of the file open dialog
        inputFileChooser.setDialogTitle("Select GEO Files");
        inputFileChooser.setMultiSelectionEnabled(true);

        // show dialog and wait for return
        int returnVal = inputFileChooser.showOpenDialog(this);

        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File files[] = inputFileChooser.getSelectedFiles();

            for (File f : files) {
                try {
                    appendFile(GEO_FILE_COL, f.getCanonicalPath());
                } catch (IOException ex) {
                    sendInfoText("-ERROR- append GEO - Can't seem to resolve the coninical path for " + f.getName());
                }
            }

        } else {
            sendInfoText("Append GEO command cancelled by user.");
        }

    }//GEN-LAST:event_geoFileHeaderAppendMenuActionPerformed

    private void inputFileHeaderLoadFileMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_inputFileHeaderLoadFileMenuActionPerformed
        // setup the look of the file open dialog
        inputFileChooser.setDialogTitle("Select Input List File");
        inputFileChooser.setMultiSelectionEnabled(false);

        // show dialog and wait for return
        int returnVal = inputFileChooser.showOpenDialog(this);

        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File filename = inputFileChooser.getSelectedFile();

            clearFiles(INPUT_FILE_COL);
            loadFiles(0, INPUT_FILE_COL, readFileList(filename.getPath()));

        } else {
            sendInfoText("Load input file list command cancelled by user.");
        }
    }//GEN-LAST:event_inputFileHeaderLoadFileMenuActionPerformed

    private void inputFileHeaderAppendFileMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_inputFileHeaderAppendFileMenuActionPerformed
        // setup the look of the file open dialog
        inputFileChooser.setDialogTitle("Select Input List File");
        inputFileChooser.setMultiSelectionEnabled(false);

        // show dialog and wait for return
        int returnVal = inputFileChooser.showOpenDialog(this);

        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File filename = inputFileChooser.getSelectedFile();

            appendFiles(INPUT_FILE_COL, readFileList(filename.getPath()));

        } else {
            sendInfoText("Append input file list command cancelled by user.");
        }
    }//GEN-LAST:event_inputFileHeaderAppendFileMenuActionPerformed

    private void geoFileHeaderLoadFileMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_geoFileHeaderLoadFileMenuActionPerformed
        // setup the look of the file open dialog
        inputFileChooser.setDialogTitle("Select GEO List File");
        inputFileChooser.setMultiSelectionEnabled(false);

        // show dialog and wait for return
        int returnVal = inputFileChooser.showOpenDialog(this);

        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File filename = inputFileChooser.getSelectedFile();

            clearFiles(GEO_FILE_COL);
            loadFiles(0, GEO_FILE_COL, readFileList(filename.getPath()));

        } else {
            sendInfoText("Load GEO file list command cancelled by user.");
        }
    }//GEN-LAST:event_geoFileHeaderLoadFileMenuActionPerformed

    private void geoFileHeaderAppendFileMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_geoFileHeaderAppendFileMenuActionPerformed
        // setup the look of the file open dialog
        inputFileChooser.setDialogTitle("Select GEO List File");
        inputFileChooser.setMultiSelectionEnabled(false);

        // show dialog and wait for return
        int returnVal = inputFileChooser.showOpenDialog(this);

        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File filename = inputFileChooser.getSelectedFile();

            appendFiles(GEO_FILE_COL, readFileList(filename.getPath()));

        } else {
            sendInfoText("Append GEO file list command cancelled by user.");
        }
    }//GEN-LAST:event_geoFileHeaderAppendFileMenuActionPerformed

    private void inputTableInsertMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_inputTableInsertMenuActionPerformed

        // setup the look of the file open dialog
        if (tablePopupColumn == INPUT_FILE_COL) {
            inputFileChooser.setDialogTitle("Select Input Files");
        } else {
            inputFileChooser.setDialogTitle("Select Input GEO Files");
        }
        inputFileChooser.setMultiSelectionEnabled(true);

        // show dialog and wait for return
        int returnVal = inputFileChooser.showOpenDialog(this);

        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File files[] = inputFileChooser.getSelectedFiles();

            insertFiles(tablePopupRow, tablePopupColumn, files);

        } else {
            sendInfoText("Insert input files cancelled by user.");
        }
    }//GEN-LAST:event_inputTableInsertMenuActionPerformed

    private void inputTableFileLoadMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_inputTableFileLoadMenuActionPerformed
        // setup the look of the file open dialog
        if (tablePopupColumn == INPUT_FILE_COL) {
            inputFileChooser.setDialogTitle("Select input List File");
        } else {
            inputFileChooser.setDialogTitle("Select GEO List File");
        }
        inputFileChooser.setMultiSelectionEnabled(false);

        // show dialog and wait for return
        int returnVal = inputFileChooser.showOpenDialog(this);

        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File filename = inputFileChooser.getSelectedFile();

            loadFiles(tablePopupRow, tablePopupColumn, readFileList(filename.getPath()));

        } else {
            sendInfoText("Load input file list command cancelled by user.");
        }

    }//GEN-LAST:event_inputTableFileLoadMenuActionPerformed

    private void inputTableFileInsertMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_inputTableFileInsertMenuActionPerformed
        // setup the look of the file open dialog
        if (tablePopupColumn == INPUT_FILE_COL) {
            inputFileChooser.setDialogTitle("Select input List File");
        } else {
            inputFileChooser.setDialogTitle("Select GEO List File");
        }
        inputFileChooser.setMultiSelectionEnabled(false);

        // show dialog and wait for return
        int returnVal = inputFileChooser.showOpenDialog(this);

        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File filename = inputFileChooser.getSelectedFile();

            insertFiles(tablePopupRow, tablePopupColumn, readFileList(filename.getPath()));

        } else {
            sendInfoText("Insert input file list command cancelled by user.");
        }
    }//GEN-LAST:event_inputTableFileInsertMenuActionPerformed

    private void inputFileHeaderWriteFileMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_inputFileHeaderWriteFileMenuActionPerformed

        inputFileChooser.setDialogTitle("Save to input List File");
        inputFileChooser.setMultiSelectionEnabled(false);

        // show dialog and wait for return
        int returnVal = inputFileChooser.showSaveDialog(this);

        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File filename = inputFileChooser.getSelectedFile();

            // get list of files
            ArrayList<String> list = new ArrayList<String>();
            String val;
            DefaultTableModel tableModel = (DefaultTableModel) inputFileTable.getModel();
            for (int i = 0; i < tableModel.getRowCount(); i++) {
                val = (String) tableModel.getValueAt(i, INPUT_FILE_COL);
                if (val.length() > 0) {
                    list.add(val);
                }
            }
            String files[] = new String[list.size()];
            list.toArray(files);

            writeFileList(filename.getPath(), files);

        } else {
            sendInfoText("Save input file list command cancelled by user.");
        }


    }//GEN-LAST:event_inputFileHeaderWriteFileMenuActionPerformed

    private void geoFileHeaderWriteFileMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_geoFileHeaderWriteFileMenuActionPerformed
        inputFileChooser.setDialogTitle("Save to GEO List File");
        inputFileChooser.setMultiSelectionEnabled(false);

        // show dialog and wait for return
        int returnVal = inputFileChooser.showSaveDialog(this);

        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File filename = inputFileChooser.getSelectedFile();

            // get list of files
            ArrayList<String> list = new ArrayList<String>();
            String val;
            DefaultTableModel tableModel = (DefaultTableModel) inputFileTable.getModel();
            for (int i = 0; i < tableModel.getRowCount(); i++) {
                val = (String) tableModel.getValueAt(i, GEO_FILE_COL);
                if (val.length() > 0) {
                    list.add(val);
                }
            }
            String files[] = new String[list.size()];
            list.toArray(files);

            writeFileList(filename.getPath(), files);

        } else {
            sendInfoText("Save GEO file list command cancelled by user.");
        }

    }//GEN-LAST:event_geoFileHeaderWriteFileMenuActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {

        String osName = System.getProperty("os.name").toLowerCase();
        // returning Nimbus as default LAF id not Mac OS and not Windows
        if (osName.contains("inux")) {
            final UIManager.LookAndFeelInfo[] lookAndFeels = UIManager.getInstalledLookAndFeels();
            for (UIManager.LookAndFeelInfo laf : lookAndFeels) {
                if ("nimbus".equalsIgnoreCase(laf.getName())) {
                    try {
                        UIManager.setLookAndFeel(laf.getClassName());
                    } catch (Exception ex) {
                    }
                }
            }
        }
               
                
                
      

        java.awt.EventQueue.invokeLater(new Runnable() {

            @Override
            public void run() {
                new SeadasProcessorFrame().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton closeButton;
    private javax.swing.JCheckBox geoFileCheckBox;
    private javax.swing.JMenuItem geoFileHeaderAppendFileMenu;
    private javax.swing.JMenuItem geoFileHeaderAppendMenu;
    private javax.swing.JMenuItem geoFileHeaderClearMenu;
    private javax.swing.JMenuItem geoFileHeaderLoadFileMenu;
    private javax.swing.JPopupMenu geoFileHeaderPopupMenu;
    private javax.swing.JMenuItem geoFileHeaderReplaceMenu;
    private javax.swing.JMenuItem geoFileHeaderWriteFileMenu;
    private javax.swing.JMenuItem inputFileHeaderAppendFileMenu;
    private javax.swing.JMenuItem inputFileHeaderAppendMenu;
    private javax.swing.JMenuItem inputFileHeaderClearMenu;
    private javax.swing.JMenuItem inputFileHeaderLoadFileMenu;
    private javax.swing.JPopupMenu inputFileHeaderPopupMenu;
    private javax.swing.JMenuItem inputFileHeaderReplaceMenu;
    private javax.swing.JMenuItem inputFileHeaderWriteFileMenu;
    private javax.swing.JTable inputFileTable;
    private javax.swing.JMenuItem inputTableDeleteRowMenu;
    private javax.swing.JMenuItem inputTableFileInsertMenu;
    private javax.swing.JMenuItem inputTableFileLoadMenu;
    private javax.swing.JMenuItem inputTableInsertMenu;
    private javax.swing.JMenuItem inputTableInsertRowMenu;
    private javax.swing.JPopupMenu inputTablePopupMenu;
    private javax.swing.JMenuItem inputTableReplaceMenu;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JPopupMenu.Separator jSeparator3;
    private javax.swing.JPopupMenu.Separator jSeparator4;
    private javax.swing.JPopupMenu.Separator jSeparator5;
    private javax.swing.JPopupMenu.Separator jSeparator6;
    private javax.swing.JPopupMenu.Separator jSeparator7;
    private javax.swing.JTable outputTable;
    private javax.swing.JButton runButton;
    // End of variables declaration//GEN-END:variables
    private TableHeaderMouseHandler tableHeaderMouseHandler = new TableHeaderMouseHandler();
    private TableMouseHandler tableMouseHandler = new TableMouseHandler();
    private int tablePopupViewColumn;
    private int tablePopupColumn;
    private int tablePopupRow;
    private TableColumn geoTableColumn;
    private JFileChooser inputFileChooser = new JFileChooser();
    // option editor windows
    private OptionEditorFrame l2genOptionEditor = null;
    private OptionEditorFrame[] optionEditors = new OptionEditorFrame[NUM_OUTPUT_ROWS];
    private String[] outputProgramNames = {"l1agen_seawifs", "l1brsgen", "l1mapgen", "l2gen", "l2brsgen",
        "l2mapgen", "l3bin", "l3mapgen", "l3gen"};

    private void setup() {
        MyCellEditor editor = new MyCellEditor();
        editor.setClickCountToStart(1);
        //inputFileTable.setDefaultEditor(new Object().getClass(), editor);
        inputFileTable.setSurrendersFocusOnKeystroke(true);

        
        inputFileTable.getTableHeader().addMouseListener(tableHeaderMouseHandler);
        DefaultTableModel tableModel = (DefaultTableModel) inputFileTable.getModel();
        tableModel.setValueAt("", 0, 0);
        tableModel.setValueAt("", 0, 1);

        geoTableColumn = inputFileTable.getColumn("Geo File");
        removeGeoColumn();

        inputFileTable.getModel().addTableModelListener(new TableModelListener() {

            public void tableChanged(TableModelEvent e) {
                if (e.getType() == TableModelEvent.UPDATE) {

                    int row = e.getFirstRow();
                    int col = e.getColumn();
                    sendInfoText("InputFile Table Model Event - row=" + row + ", col=" + col);
                    inputFileChanged(row, col);
                }

            }
        });

        inputFileChooser.setDialogType(JFileChooser.OPEN_DIALOG);
        inputFileChooser.setMultiSelectionEnabled(true);
        inputFileChooser.setFileSelectionMode(JFileChooser.FILES_ONLY);


        outputTable.getColumn("Options").setCellRenderer(new TableButtonRenderer());
        outputTable.getColumn("Options").setCellEditor(new TableButtonEditor(new JCheckBox()));

        outputTable.getColumn("Save").setResizable(false);
        outputTable.getColumn("Save").setMaxWidth(40);

        outputTable.getColumn("Process").setResizable(false);
        outputTable.getColumn("Process").setMaxWidth(75);

        outputTable.getColumn("Options").setResizable(false);
        outputTable.getColumn("Options").setMaxWidth(70);

        outputTable.getModel().addTableModelListener(new TableModelListener() {

            public void tableChanged(TableModelEvent e) {
                int row = e.getFirstRow();
                int col = e.getColumn();
                sendInfoText("Output Table Model Event - firstRow=" + row + ", col=" + col);
                if (col == 2) {
                    showOptionWindow(row);
                }

            }
        });

        // make it so text fields select all of the text when they gain focus
//        KeyboardFocusManager.getCurrentKeyboardFocusManager().addPropertyChangeListener("permanentFocusOwner", new PropertyChangeListener() {
//
//            @Override
//            public void propertyChange(final PropertyChangeEvent e) {
//
//                sendInfoText("PropertyChangeEvent, Class = " + e.getNewValue().getClass().getSimpleName());
//
//                if (e.getOldValue() instanceof JTextField) {
//                    SwingUtilities.invokeLater(new Runnable() {
//
//                        @Override
//                        public void run() {
//                            JTextField oldTextField = (JTextField) e.getOldValue();
//                            oldTextField.setSelectionStart(0);
//                            oldTextField.setSelectionEnd(0);
//                        }
//                    });
//
//                }
//
//                if (e.getNewValue() instanceof JTextField) {
//                    SwingUtilities.invokeLater(new Runnable() {
//
//                        @Override
//                        public void run() {
//                            JTextField textField = (JTextField) e.getNewValue();
//                            textField.selectAll();
//                        }
//                    });
//
//                }
//            }
//        });
//

    }

    private void sendInfoText(String s) {
        System.out.println(s);
    }

    private void clearFiles(int col) {
        DefaultTableModel tableModel = (DefaultTableModel) inputFileTable.getModel();

        for (int i = 0; i < tableModel.getRowCount(); i++) {
            tableModel.setValueAt("", i, col);
        }
    }

    private void appendRow() {
        DefaultTableModel tableModel = (DefaultTableModel) inputFileTable.getModel();
        tableModel.addRow(new String[]{"", ""});
    }

    private void insertRow(int row) {
        DefaultTableModel tableModel = (DefaultTableModel) inputFileTable.getModel();
        tableModel.insertRow(row, new String[]{"", ""});
    }

    private void deleteRow(int row) {
        DefaultTableModel tableModel = (DefaultTableModel) inputFileTable.getModel();
        if (tableModel.getRowCount() > 1) {
            tableModel.removeRow(row);
        } else {
            tableModel.setValueAt("", row, 0);
            tableModel.setValueAt("", row, 1);
        }
    }

    private void removeGeoColumn() {
        if (inputFileTable.getColumnCount() == 2) {
            inputFileTable.removeColumn(geoTableColumn);
        }
        if (geoFileCheckBox.isSelected()) {
            geoFileCheckBox.setSelected(false);
        }
    }

    private void addGeoColumn() {
        if (inputFileTable.getColumnCount() == 1) {
            inputFileTable.addColumn(geoTableColumn);
        }
        if (!geoFileCheckBox.isSelected()) {
            geoFileCheckBox.setSelected(true);
        }
    }

    private void showOptionWindow(int row) {
        if (optionEditors[row] == null) {
            optionEditors[row] = new OptionEditorFrame();
            optionEditors[row].setProgName(outputProgramNames[row]);
        }
        optionEditors[row].setVisible(true);
        sendInfoText("Show OptionWindow(" + row + ") = " + outputProgramNames[row]);
    }

    private void inputFileChanged(int row, int col) {
        int i;

        DefaultTableModel tableModel = (DefaultTableModel) inputFileTable.getModel();
        String str = tableModel.getValueAt(row, col).toString();
        sendInfoText("inputFileChanged - " + str);
        String inputStr, geoStr;

        // make sure there is a blank row at the end
        int maxRow = tableModel.getRowCount() - 1;
        inputStr = (String) tableModel.getValueAt(maxRow, INPUT_FILE_COL);
        if (geoFileCheckBox.isSelected()) {
            geoStr = (String) tableModel.getValueAt(maxRow, GEO_FILE_COL);
            if (inputStr.length() != 0 || geoStr.length() != 0) {
                tableModel.addRow(new String[]{"", ""});
            }
        } else {
            if (inputStr.length() != 0) {
                tableModel.addRow(new String[]{"", ""});
            }
        }

        // clear out blank lines
//        maxRow = tableModel.getRowCount() - 1;
//        for (i = maxRow - 1; i >= 0; i--) {
//            if (geoFileCheckBox.isSelected()) {
//                if (tableModel.getValueAt(i, INPUT_FILE_COL).toString().trim().length() == 0
//                        && tableModel.getValueAt(i, GEO_FILE_COL).toString().trim().length() == 0) {
//                    tableModel.removeRow(i);
//                }
//            } else {
//                if (tableModel.getValueAt(i, INPUT_FILE_COL).toString().trim().length() == 0) {
//                    tableModel.removeRow(i);
//                }
//            }
//        }

    }

    private void loadFile(int row, int col, String str) {
        DefaultTableModel tableModel = (DefaultTableModel) inputFileTable.getModel();
        while (row >= tableModel.getRowCount()) {
            appendRow();
        }
        tableModel.setValueAt(str, row, col);
    }

    private void insertFile(int row, int col, String str) {
        DefaultTableModel tableModel = (DefaultTableModel) inputFileTable.getModel();
        int r = tableModel.getRowCount() - 1;
        while (tableModel.getValueAt(r, col).toString().length() == 0) {
            r--;
            if (r == -1) {
                break;
            }
        }

        while (r >= row) {
            tableModel.setValueAt(tableModel.getValueAt(r, col), r + 1, col);
            r--;
        }
        loadFile(row, col, str);
    }

    private void appendFile(int col, String str) {
        DefaultTableModel tableModel = (DefaultTableModel) inputFileTable.getModel();
        int row = tableModel.getRowCount() - 1;
        while (tableModel.getValueAt(row, col).toString().length() == 0) {
            row--;
            if (row == -1) {
                break;
            }
        }
        row++;
        loadFile(row, col, str);
    }

    private void appendFiles(int col, String str[]) {
        DefaultTableModel tableModel = (DefaultTableModel) inputFileTable.getModel();
        int row = tableModel.getRowCount() - 1;
        while (tableModel.getValueAt(row, col).toString().length() == 0) {
            row--;
            if (row == -1) {
                break;
            }
        }
        row++;
        for (String s : str) {
            loadFile(row, col, s);
            row++;
        }
    }

    private void insertFiles(int row, int col, File files[]) {

        for (File f : files) {
            try {
                insertFile(row, col, f.getCanonicalPath());
                row++;
            } catch (IOException ex) {
                sendInfoText("-E- insertFiles - Can't seem to resolve the coninical path for " + f.getName());
            }
        }
    }

    private void insertFiles(int row, int col, String files[]) {
        for (String s : files) {
            insertFile(row, col, s);
            row++;
        }
    }

    private void loadFiles(int row, int col, File files[]) {

        for (File f : files) {
            try {
                loadFile(row, col, f.getCanonicalPath());
                row++;
            } catch (IOException ex) {
                sendInfoText("-E- loadFiles - Can't seem to resolve the coninical path for " + f.getName());
            }
        }
    }

    private void loadFiles(int row, int col, String files[]) {
        for (String s : files) {
            loadFile(row, col, s);
            row++;
        }
    }

    private int getNumRows() {
        DefaultTableModel tableModel = (DefaultTableModel) inputFileTable.getModel();
        return tableModel.getRowCount();
    }

    private String[] readFileList(String filename) {
        BufferedReader reader = null;
        ArrayList list = new ArrayList();
        String str;

        try {
            reader = new BufferedReader(new FileReader(filename));
            while ((str = reader.readLine()) != null) {
                str = str.trim();
                if (str.length() > 0 && str.charAt(0) != '#') {
                    list.add(str);
                }
            }
            reader.close();

            if (list.size() > 0) {
                String a[] = new String[list.size()];
                list.toArray(a);
                return a;
            }
            return null;

        } catch (FileNotFoundException ex) {
            sendInfoText("-E- File list not found - " + filename);
            return null;
        } catch (IOException ex) {
            sendInfoText("-E- Problen reading file list file - " + filename);
            return null;
        }
    }

    private void writeFileList(String filename, String files[]) {
        BufferedWriter writer = null;
        try {
            writer = new BufferedWriter(new FileWriter(filename));
            for (String str : files) {
                writer.write(str);
                writer.newLine();
            }
            writer.close();

        } catch (IOException ex) {
            sendInfoText("-E- Problem writing file list file - " + filename);
        }

    }
}
